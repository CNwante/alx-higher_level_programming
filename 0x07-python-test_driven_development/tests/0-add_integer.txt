====================================================
add_integer - A function that adds 2 integers.
====================================================

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

	>>> add_integer = __import__('0-add_integer').add_integer

================ Case of Numbers ==================

	The function works with natuaral numbers.
	>>> add_integer(2, 3)
	5

::::::::

	The function works with negative numbers.
	>>> add_integer(-6, -2)
	-8

::::::::

	It works with both positive and negative numbers.
	>>> add_integer(-3, 2)
	-1

::::::::

	It works with floating-point values.
	>>> add_integer(3.2, 2.3)
	5

::::::::

	It works with floating-point value and a natural numbers.
	>>> add_integer(3.2, 3)
	6

	>>> add_integer(-3.2, -2.3)
	-5

	>>> add_integer(2.3, -3)
    	-1

	Note: floats are casted into int before addtion.

::::::::

	The second argument is optional - by default, it is 98.
    	>>> add_integer(2)
   	100

============== Cases of Non-Numbers ================
``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised.

::::::::

	>>> add_integer("ALX", "Africa")
	Traceback (most recent call last):
	TypeError: a must be an integer

::::::::

	>>> add_integer(2, "Africa")
    	Traceback (most recent call last):
    	TypeError: b must be an integer

::::::::

	>>> add_integer("ALX", 2)
	Traceback (most recent call last):
    	TypeError: a must be an integer

::::::::

	>>> add_integer("ALX")
    	Traceback (most recent call last):
   	TypeError: a must be an integer

::::::::

	>>> add_integer(2.3, "Africa")
    	Traceback (most recent call last):
    	TypeError: b must be an integer

::::::::

	>>> add_integer(None)
    	Traceback (most recent call last):
    	TypeError: a must be an integer

::::::::

	==== It will raise OverflowError with inifinity values ====

	>>> add_integer(float('inf'))
    	Traceback (most recent call last):
    	OverflowError: cannot convert float infinity to integer

::::::::

	>>> add_integer(2, float('inf'))
    	Traceback (most recent call last):
    	OverflowError: cannot convert float infinity to integer

::::::::

	==== It will raise ValueError with NaN ====

    	>>> add_integer(float('nan'))
    	Traceback (most recent call last):
    	ValueError: cannot convert float NaN to integer

::::::::

    	>>> add_integer(2, float('nan'))
    	Traceback (most recent call last):
    	ValueError: cannot convert float NaN to integer
